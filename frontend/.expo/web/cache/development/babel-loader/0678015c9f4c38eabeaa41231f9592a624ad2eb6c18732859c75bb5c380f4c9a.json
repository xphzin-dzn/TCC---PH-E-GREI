{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport api from \"../services/api\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var handleLogin = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var response = yield api.post('/auth/login', {\n          email: email,\n          password: password\n        });\n        var token = response.data.token;\n        Alert.alert('Login com sucesso!');\n        navigation.navigate('Dashboard', {\n          token: token\n        });\n      } catch (error) {\n        Alert.alert('Erro no login', 'Email ou senha inválidos.');\n      }\n    });\n    return function handleLogin() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Login\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Email\",\n      value: email,\n      onChangeText: setEmail,\n      keyboardType: \"email-address\",\n      autoCapitalize: \"none\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Senha\",\n      value: password,\n      onChangeText: setPassword,\n      secureTextEntry: true\n    }), _jsx(Button, {\n      title: \"Entrar\",\n      onPress: handleLogin\n    }), _jsx(Button, {\n      title: \"N\\xE3o tem uma conta? Registre-se\",\n      onPress: function onPress() {\n        return navigation.navigate('Register');\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    padding: 20\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20,\n    textAlign: 'center'\n  },\n  input: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginBottom: 12,\n    padding: 10\n  }\n});\nexport default LoginScreen;","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","StyleSheet","Alert","api","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","navigation","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","handleLogin","_ref2","_asyncToGenerator","response","post","token","data","alert","navigate","error","apply","arguments","style","styles","container","children","title","input","placeholder","value","onChangeText","keyboardType","autoCapitalize","secureTextEntry","onPress","create","flex","justifyContent","padding","fontSize","fontWeight","marginBottom","textAlign","height","borderColor","borderWidth"],"sources":["C:/Users/ITX Gamer/Trabalho-de-Conslusao-de-Curso-TCC-/frontend/src/screens/LoginScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Text, TextInput, Button, StyleSheet, Alert } from 'react-native';\r\nimport api from '../services/api';\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const handleLogin = async () => {\r\n        try {\r\n            const response = await api.post('/auth/login', { email, password });\r\n            const { token } = response.data;\r\n            // Salve o token e navegue para o Dashboard\r\n            Alert.alert('Login com sucesso!');\r\n            navigation.navigate('Dashboard', { token });\r\n        } catch (error) {\r\n            Alert.alert('Erro no login', 'Email ou senha inválidos.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={styles.title}>Login</Text>\r\n            <TextInput\r\n                style={styles.input}\r\n                placeholder=\"Email\"\r\n                value={email}\r\n                onChangeText={setEmail}\r\n                keyboardType=\"email-address\"\r\n                autoCapitalize=\"none\"\r\n            />\r\n            <TextInput\r\n                style={styles.input}\r\n                placeholder=\"Senha\"\r\n                value={password}\r\n                onChangeText={setPassword}\r\n                secureTextEntry\r\n            />\r\n            <Button title=\"Entrar\" onPress={handleLogin} />\r\n            <Button\r\n                title=\"Não tem uma conta? Registre-se\"\r\n                onPress={() => navigation.navigate('Register')}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        padding: 20,\r\n    },\r\n    title: {\r\n        fontSize: 24,\r\n        fontWeight: 'bold',\r\n        marginBottom: 20,\r\n        textAlign: 'center',\r\n    },\r\n    input: {\r\n        height: 40,\r\n        borderColor: 'gray',\r\n        borderWidth: 1,\r\n        marginBottom: 12,\r\n        padding: 10,\r\n    },\r\n});\r\n\r\nexport default LoginScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}